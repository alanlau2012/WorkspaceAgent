import React from 'react'
import { render, screen, fireEvent, waitFor, act } from '@testing-library/react'
import { ChatPanel } from '../ChatPanel'

// Mock Zustand store
const mockUseChatStore = {
  messages: [],
  selectedModel: 'mock-echo',
  availableModels: [
    { id: 'mock-echo', name: 'Mock Echo', description: 'ÂõûÂ£∞ÊµãËØïÊ®°Âûã' },
    { id: 'mock-assistant', name: 'Mock Assistant', description: 'Ê®°ÊãüÂä©ÊâãÊ®°Âûã' }
  ],
  isStreaming: false,
  currentInput: '',
  setSelectedModel: jest.fn(),
  setCurrentInput: jest.fn(),
  sendMessage: jest.fn(),
  clearMessages: jest.fn(),
  getMessageStats: jest.fn(() => ({ total: 0, user: 0, assistant: 0 }))
}

jest.mock('../../../stores/chatStore', () => ({
  useChatStore: () => mockUseChatStore
}))

// Mock window.confirm
global.confirm = jest.fn()

describe('ChatPanel', () => {
  beforeEach(() => {
    jest.clearAllMocks()
    mockUseChatStore.messages = []
    mockUseChatStore.isStreaming = false
    mockUseChatStore.currentInput = ''
  })

  test('Â∫îËØ•Ê∏≤ÊüìËÅäÂ§©Èù¢Êùø', () => {
    render(<ChatPanel />)
    
    expect(screen.getByText('AI Âä©Êâã')).toBeInTheDocument()
    expect(screen.getByLabelText('Ê®°Âûã:')).toBeInTheDocument()
    expect(screen.getByPlaceholderText(/ËæìÂÖ•Ê∂àÊÅØ/)).toBeInTheDocument()
  })

  test('Â∫îËØ•ÊòæÁ§∫Ê®°ÂûãÈÄâÊã©Âô®', () => {
    render(<ChatPanel />)
    
    const modelSelect = screen.getByLabelText('Ê®°Âûã:')
    expect(modelSelect.value).toBe('mock-echo')
    
    expect(screen.getByText('Mock Echo')).toBeInTheDocument()
    expect(screen.getByText('Mock Assistant')).toBeInTheDocument()
  })

  test('Â∫îËØ•Â§ÑÁêÜÊ®°ÂûãÂàáÊç¢', () => {
    render(<ChatPanel />)
    
    const modelSelect = screen.getByLabelText('Ê®°Âûã:')
    fireEvent.change(modelSelect, { target: { value: 'mock-assistant' } })
    
    expect(mockUseChatStore.setSelectedModel).toHaveBeenCalledWith('mock-assistant')
  })

  test('Â∫îËØ•Â§ÑÁêÜËæìÂÖ•ÂèòÂåñ', () => {
    render(<ChatPanel />)
    
    const input = screen.getByPlaceholderText(/ËæìÂÖ•Ê∂àÊÅØ/)
    fireEvent.change(input, { target: { value: 'Hello' } })
    
    expect(mockUseChatStore.setCurrentInput).toHaveBeenCalledWith('Hello')
  })

  test('Â∫îËØ•ÂèëÈÄÅÊ∂àÊÅØ', async () => {
    mockUseChatStore.currentInput = 'Hello, World!'
    
    render(<ChatPanel />)
    
    const form = screen.getByPlaceholderText(/ËæìÂÖ•Ê∂àÊÅØ/).closest('form')
    fireEvent.submit(form)
    
    expect(mockUseChatStore.setCurrentInput).toHaveBeenCalledWith('')
    expect(mockUseChatStore.sendMessage).toHaveBeenCalledWith('Hello, World!', undefined)
  })

  test('Â∫îËØ•ÈÄöËøáEnterÈîÆÂèëÈÄÅÊ∂àÊÅØ', () => {
    mockUseChatStore.currentInput = 'Hello'
    
    render(<ChatPanel />)
    
    const input = screen.getByPlaceholderText(/ËæìÂÖ•Ê∂àÊÅØ/)
    fireEvent.keyDown(input, { key: 'Enter', shiftKey: false })
    
    expect(mockUseChatStore.sendMessage).toHaveBeenCalledWith('Hello', undefined)
  })

  test('Shift+EnterÂ∫îËØ•‰∏çÂèëÈÄÅÊ∂àÊÅØ', () => {
    mockUseChatStore.currentInput = 'Hello'
    
    render(<ChatPanel />)
    
    const input = screen.getByPlaceholderText(/ËæìÂÖ•Ê∂àÊÅØ/)
    fireEvent.keyDown(input, { key: 'Enter', shiftKey: true })
    
    expect(mockUseChatStore.sendMessage).not.toHaveBeenCalled()
  })

  test('Â∫îËØ•ÊòæÁ§∫Á©∫Áä∂ÊÄÅ', () => {
    render(<ChatPanel />)
    
    expect(screen.getByText('Ê¨¢Ëøé‰ΩøÁî® AI Âä©ÊâãÔºÅ')).toBeInTheDocument()
    expect(screen.getByText('ËØ¢ÈóÆÂÖ≥‰∫éÊñá‰ª∂ÁöÑÈóÆÈ¢ò')).toBeInTheDocument()
  })

  test('Â∫îËØ•ÊòæÁ§∫Ê∂àÊÅØÂàóË°®', () => {
    mockUseChatStore.messages = [
      {
        id: 1,
        type: 'user',
        content: 'Hello',
        timestamp: '2023-12-01T10:00:00.000Z'
      },
      {
        id: 2,
        type: 'assistant',
        content: 'Hi there!',
        timestamp: '2023-12-01T10:00:01.000Z'
      }
    ]
    mockUseChatStore.getMessageStats = jest.fn(() => ({ total: 2, user: 1, assistant: 1 }))
    
    render(<ChatPanel />)
    
    expect(screen.getByText('Hello')).toBeInTheDocument()
    expect(screen.getByText('Hi there!')).toBeInTheDocument()
    expect(screen.getByText('2 Êù°Ê∂àÊÅØ')).toBeInTheDocument()
  })

  test('Â∫îËØ•ÊòæÁ§∫ËæìÂÖ•‰∏≠ÊåáÁ§∫Âô®', () => {
    mockUseChatStore.isStreaming = true
    mockUseChatStore.messages = [
      { id: 1, type: 'user', content: 'Hello' }
    ]
    
    render(<ChatPanel />)
    
    expect(screen.getByPlaceholderText('AI Ê≠£Âú®ÊÄùËÄÉ‰∏≠...')).toBeInTheDocument()
    
    // Â∫îËØ•ÊúâËæìÂÖ•‰∏≠ÁöÑÂä®ÁîªÁÇπ
    const typingDots = document.querySelector('.typing-dots')
    expect(typingDots).toBeInTheDocument()
  })

  test('Â∫îËØ•Âú®ÊµÅÂºè‰º†ËæìÊó∂Á¶ÅÁî®ËæìÂÖ•', () => {
    mockUseChatStore.isStreaming = true
    
    render(<ChatPanel />)
    
    const input = screen.getByPlaceholderText(/AI Ê≠£Âú®ÊÄùËÄÉ‰∏≠/)
    const sendButton = screen.getByTitle('ÂèëÈÄÅÊ∂àÊÅØ')
    const modelSelect = screen.getByLabelText('Ê®°Âûã:')
    
    expect(input).toBeDisabled()
    expect(sendButton).toBeDisabled()
    expect(modelSelect).toBeDisabled()
  })

  test('Â∫îËØ•Ê∏ÖÁ©∫ËÅäÂ§©ËÆ∞ÂΩï', () => {
    global.confirm.mockReturnValue(true)
    mockUseChatStore.messages = [{ id: 1, content: 'test' }]
    
    render(<ChatPanel />)
    
    const clearButton = screen.getByTitle('Ê∏ÖÁ©∫ËÅäÂ§©')
    fireEvent.click(clearButton)
    
    expect(global.confirm).toHaveBeenCalledWith('Á°ÆÂÆöË¶ÅÊ∏ÖÁ©∫ËÅäÂ§©ËÆ∞ÂΩïÂêóÔºü')
    expect(mockUseChatStore.clearMessages).toHaveBeenCalled()
  })

  test('Â∫îËØ•ÂèñÊ∂àÊ∏ÖÁ©∫ËÅäÂ§©ËÆ∞ÂΩï', () => {
    global.confirm.mockReturnValue(false)
    mockUseChatStore.messages = [{ id: 1, content: 'test' }]
    
    render(<ChatPanel />)
    
    const clearButton = screen.getByTitle('Ê∏ÖÁ©∫ËÅäÂ§©')
    fireEvent.click(clearButton)
    
    expect(global.confirm).toHaveBeenCalledWith('Á°ÆÂÆöË¶ÅÊ∏ÖÁ©∫ËÅäÂ§©ËÆ∞ÂΩïÂêóÔºü')
    expect(mockUseChatStore.clearMessages).not.toHaveBeenCalled()
  })

  test('Â∫îËØ•Âú®Ê≤°ÊúâÊ∂àÊÅØÊó∂Á¶ÅÁî®Ê∏ÖÁ©∫ÊåâÈíÆ', () => {
    render(<ChatPanel />)
    
    const clearButton = screen.getByTitle('Ê∏ÖÁ©∫ËÅäÂ§©')
    expect(clearButton).toBeDisabled()
  })

  test('Â∫îËØ•ÊòæÁ§∫‰∏ä‰∏ãÊñá‰ø°ÊÅØ', () => {
    const context = {
      selectedFile: { name: 'test.js' },
      workspacePath: '/workspace'
    }
    
    render(<ChatPanel context={context} />)
    
    expect(screen.getByText('üìé ÂΩìÂâç‰∏ä‰∏ãÊñá:')).toBeInTheDocument()
    expect(screen.getByText('test.js')).toBeInTheDocument()
    expect(screen.getByText('/workspace')).toBeInTheDocument()
  })

  test('Â∫îËØ•Â§ÑÁêÜÈáçËØïÊ∂àÊÅØ', async () => {
    const retryMessage = {
      id: 1,
      type: 'user',
      content: 'Hello',
      context: { files: [] }
    }
    
    mockUseChatStore.messages = [retryMessage]
    
    render(<ChatPanel />)
    
    // ËøôÈáåÈúÄË¶ÅÊ®°Êãü ChatMessage ÁªÑ‰ª∂Ë∞ÉÁî® onRetry
    // Áî±‰∫éÊàë‰ª¨Ê≤°ÊúâÊ∏≤ÊüìÁúüÂÆûÁöÑ ChatMessageÔºåÊàë‰ª¨Áõ¥Êé•ÊµãËØï handleRetry ÂáΩÊï∞ÁöÑÈÄªËæë
    expect(mockUseChatStore.sendMessage).not.toHaveBeenCalled()
  })

  test('Â∫îËØ•ÈòªÊ≠¢ÂèëÈÄÅÁ©∫Ê∂àÊÅØ', () => {
    mockUseChatStore.currentInput = '   '
    
    render(<ChatPanel />)
    
    const form = screen.getByPlaceholderText(/ËæìÂÖ•Ê∂àÊÅØ/).closest('form')
    fireEvent.submit(form)
    
    expect(mockUseChatStore.sendMessage).not.toHaveBeenCalled()
  })

  test('Â∫îËØ•ÈòªÊ≠¢Âú®ÊµÅÂºè‰º†ËæìÊó∂ÂèëÈÄÅÊ∂àÊÅØ', () => {
    mockUseChatStore.currentInput = 'Hello'
    mockUseChatStore.isStreaming = true
    
    render(<ChatPanel />)
    
    const form = screen.getByPlaceholderText(/AI Ê≠£Âú®ÊÄùËÄÉ‰∏≠/).closest('form')
    fireEvent.submit(form)
    
    expect(mockUseChatStore.sendMessage).not.toHaveBeenCalled()
  })

  test('Â∫îËØ•Âú®ËæìÂÖ•‰∏∫Á©∫Êó∂Á¶ÅÁî®ÂèëÈÄÅÊåâÈíÆ', () => {
    mockUseChatStore.currentInput = ''
    
    render(<ChatPanel />)
    
    const sendButton = screen.getByTitle('ÂèëÈÄÅÊ∂àÊÅØ')
    expect(sendButton).toBeDisabled()
  })

  test('Â∫îËØ•Âú®ÊúâËæìÂÖ•Êó∂ÂêØÁî®ÂèëÈÄÅÊåâÈíÆ', () => {
    mockUseChatStore.currentInput = 'Hello'
    
    render(<ChatPanel />)
    
    const sendButton = screen.getByTitle('ÂèëÈÄÅÊ∂àÊÅØ')
    expect(sendButton).not.toBeDisabled()
  })
})
