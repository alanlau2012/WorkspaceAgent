class i{constructor(){this.providers=new Map,this.initializeProviders()}initializeProviders(){this.providers.set("mock-echo",{name:"Mock Echo",sendMessage:async({messages:e})=>{await new Promise(r=>setTimeout(r,500+Math.random()*1e3));const t=e[e.length-1];return{content:`回声: ${t.content}`,model:"mock-echo",usage:{tokens:t.content.length}}}}),this.providers.set("mock-assistant",{name:"Mock Assistant",sendMessage:async({messages:e,context:t})=>{await new Promise(o=>setTimeout(o,800+Math.random()*1200));const r=e[e.length-1],s=r.content.toLowerCase();let n="";if(s.includes("你好")||s.includes("hello"))n="你好！我是 WorkspaceAgent 的 AI 助手。我可以帮助你管理文件、回答问题。有什么我可以帮助你的吗？";else if(s.includes("文件")||s.includes("file"))t&&t.files?n=`我看到你当前选择了 ${t.files.length} 个文件。我可以帮你分析这些文件的内容，或者协助进行文件操作。`:n="我可以帮助你进行文件管理操作，比如创建、删除、重命名文件等。你可以先在左侧选择一些文件，然后我就能基于这些文件为你提供更具体的帮助。";else if(s.includes("谢谢")||s.includes("thank"))n="不客气！如果还有其他问题，随时可以问我。";else if(s.includes("帮助")||s.includes("help"))n=`我可以为你提供以下帮助：
• 文件管理：创建、删除、重命名文件
• 代码分析：解释代码逻辑、发现问题
• 内容总结：总结文档内容
• 问题解答：回答技术问题

请告诉我你需要什么帮助！`;else{const o=["这是一个很有趣的问题。让我想想...","我理解你的意思。基于当前的上下文，我建议...","这个问题涉及多个方面。让我为你详细分析一下。","好问题！这让我想到了几个相关的要点。"];n=`${o[Math.floor(Math.random()*o.length)]}

对于"${r.content}"这个问题，我需要更多信息才能给出准确的回答。你能提供更多细节吗？`}return{content:n,model:"mock-assistant",usage:{tokens:n.length}}}}),this.providers.set("gpt-3.5-turbo",{name:"GPT-3.5 Turbo",sendMessage:async()=>{throw new Error("OpenAI API 尚未配置。请在设置中添加 API 密钥。")}}),this.providers.set("gpt-4",{name:"GPT-4",sendMessage:async()=>{throw new Error("OpenAI API 尚未配置。请在设置中添加 API 密钥。")}})}async sendMessage({model:e,messages:t,context:r}){const s=this.providers.get(e);if(!s)throw new Error(`未知的模型: ${e}`);try{return await s.sendMessage({messages:t,context:r})}catch(n){throw new Error(`${s.name} 错误: ${n.message}`)}}getAvailableModels(){return Array.from(this.providers.keys()).map(e=>({id:e,name:this.providers.get(e).name}))}isModelAvailable(e){return this.providers.has(e)}}const c=new i;export{i as LLMClient,c as llmClient};
